---
- name: FYP redo docker-compose up when there are new merge on main branch
  hosts: localhost
  connection: local 
  tasks:
    - name: Ensure the source code folder can run git command
      command: /usr/bin/git --git-dir {{ source_code_path }}.git rev-parse HEAD
      register: old_git_cmd
      args:
        chdir: "{{ source_code_path }}"
    - name: 
      ansible.builtin.debug:
        msg: "The output of git command: {{ old_git_cmd.stdout }}"
        
    - name: Ensure the source code folder is Clean for $git pull stash
      command: /usr/bin/git --git-dir {{ source_code_path }}.git 
      register: old_git_cmd
      args:
        chdir: "{{ source_code_path }}"
      ignore_errors: yes
        
    - name: Pull the lateset Source code
      command: /usr/bin/git --git-dir {{ source_code_path }}.git pull
      register: git_update_cmd
      args:
        chdir: "{{ source_code_path }}"
      failed_when: >
        ("No such file or directory" in ret.stdout) or
        (ret.stderr != '')
    - name:
      command: /usr/bin/git --git-dir {{ source_code_path }}.git rev-parse HEAD
      register: new_git_cmd
      args:
        chdir: "{{ source_code_path }}"

    - name:
      ansible.builtin.debug:
        msg: "The output of git command: {{ new_git_cmd.stdout }}"

    - name: 
      command: docker-compose -f {{ source_code_path }}docker-compose.yml down
      register: docker_compose_down
      ignore_errors: yes
      args:
        chdir: "{{ source_code_path }}"
      when: old_git_cmd.stdout != new_git_cmd.stdout
    
    - name:
      command: docker-compose -f {{ source_code_path }}docker-compose.yml up
      register: docker_compose_up
      args:
        chdir: "{{ source_code_path }}"
      when: old_git_cmd.stdout != new_git_cmd.stdout
